{
  "version": 3,
  "sources": ["../../../../../../node_modules/@rg-software/angular-archwizard/fesm2022/rg-software-angular-archwizard.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Directive, EventEmitter, ContentChild, Input, Output, HostBinding, forwardRef, Component, Injectable, Optional, HostListener, ContentChildren, Host, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepSymbol>\n *     ...\n * </ng-template>\n * ```\n */\nconst _c0 = [\"*\"];\nconst _c1 = (a0, a1, a2, a3, a4, a5) => ({\n  \"current\": a0,\n  \"editing\": a1,\n  \"done\": a2,\n  \"optional\": a3,\n  \"completed\": a4,\n  \"navigable\": a5\n});\nconst _c2 = a0 => ({\n  \"font-family\": a0\n});\nconst _c3 = a0 => ({\n  wizardStep: a0\n});\nfunction WizardNavigationBarComponent_li_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 7);\n  }\n  if (rf & 2) {\n    const step_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepTitleTemplate.templateRef)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c3, step_r1));\n  }\n}\nfunction WizardNavigationBarComponent_li_1_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const step_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(step_r1.stepTitle);\n  }\n}\nfunction WizardNavigationBarComponent_li_1_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 7);\n  }\n  if (rf & 2) {\n    const step_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepSymbolTemplate.templateRef)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c3, step_r1));\n  }\n}\nfunction WizardNavigationBarComponent_li_1_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const step_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(step_r1.navigationSymbol.symbol);\n  }\n}\nfunction WizardNavigationBarComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 1)(1, \"a\", 2)(2, \"div\", 3);\n    i0.ɵɵtemplate(3, WizardNavigationBarComponent_li_1_ng_container_3_Template, 1, 4, \"ng-container\", 4)(4, WizardNavigationBarComponent_li_1_ng_container_4_Template, 2, 1, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 6);\n    i0.ɵɵtemplate(6, WizardNavigationBarComponent_li_1_ng_container_6_Template, 1, 4, \"ng-container\", 4)(7, WizardNavigationBarComponent_li_1_ng_container_7_Template, 2, 1, \"ng-container\", 5);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const step_r1 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction6(8, _c1, ctx_r1.isCurrent(step_r1), ctx_r1.isEditing(step_r1), ctx_r1.isDone(step_r1), ctx_r1.isOptional(step_r1), ctx_r1.isCompleted(step_r1), ctx_r1.isNavigable(step_r1)));\n    i0.ɵɵattribute(\"id\", step_r1.stepId);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"awGoToStep\", step_r1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", step_r1.stepTitleTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !step_r1.stepTitleTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(15, _c2, step_r1.stepSymbolTemplate ? \"\" : step_r1.navigationSymbol.fontFamily));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", step_r1.stepSymbolTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !step_r1.stepSymbolTemplate);\n  }\n}\nconst _c4 = (a0, a1) => ({\n  \"wizard-steps\": true,\n  \"vertical\": a0,\n  \"horizontal\": a1\n});\nconst _c5 = (a0, a1, a2, a3, a4, a5, a6) => ({\n  \"vertical\": a0,\n  \"horizontal\": a1,\n  \"small\": a2,\n  \"large-filled\": a3,\n  \"large-filled-symbols\": a4,\n  \"large-empty\": a5,\n  \"large-empty-symbols\": a6\n});\nfunction WizardComponent_aw_wizard_navigation_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction7(1, _c5, ctx_r0.navBarLocation === \"left\", ctx_r0.navBarLocation === \"top\", ctx_r0.navBarLayout === \"small\", ctx_r0.navBarLayout === \"large-filled\", ctx_r0.navBarLayout === \"large-filled-symbols\", ctx_r0.navBarLayout === \"large-empty\", ctx_r0.navBarLayout === \"large-empty-symbols\"));\n  }\n}\nfunction WizardComponent_aw_wizard_navigation_bar_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction7(1, _c5, ctx_r0.navBarLocation === \"right\", ctx_r0.navBarLocation === \"bottom\", ctx_r0.navBarLayout === \"small\", ctx_r0.navBarLayout === \"large-filled\", ctx_r0.navBarLayout === \"large-filled-symbols\", ctx_r0.navBarLayout === \"large-empty\", ctx_r0.navBarLayout === \"large-empty-symbols\"));\n  }\n}\nclass WizardStepSymbolDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n  static {\n    this.ɵfac = function WizardStepSymbolDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || WizardStepSymbolDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: WizardStepSymbolDirective,\n      selectors: [[\"ng-template\", \"awStepSymbol\", \"\"], [\"ng-template\", \"awWizardStepSymbol\", \"\"]]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardStepSymbolDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\n    }]\n  }], () => [{\n    type: i0.TemplateRef\n  }], null);\n})();\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepTitleDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n  static {\n    this.ɵfac = function WizardStepTitleDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || WizardStepTitleDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: WizardStepTitleDirective,\n      selectors: [[\"ng-template\", \"awStepTitle\", \"\"], [\"ng-template\", \"awWizardStepTitle\", \"\"]]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardStepTitleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n    }]\n  }], () => [{\n    type: i0.TemplateRef\n  }], null);\n})();\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\n/* tslint:disable-next-line directive-class-suffix */\nclass WizardStep {\n  constructor() {\n    /**\n     * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n     * Takes effect when `stepSymbolTemplate` is not defined or null.\n     */\n    this.navigationSymbol = {\n      symbol: ''\n    };\n    /**\n     * A boolean describing if the wizard step is currently selected\n     */\n    this.selected = false;\n    /**\n     * A boolean describing if the wizard step has been completed\n     */\n    this.completed = false;\n    /**\n     * A boolean describing if the wizard step is shown as completed when the wizard is presented to the user\n     *\n     * Users will typically use `CompletedStepDirective` to set this flag\n     */\n    this.initiallyCompleted = false;\n    /**\n     * A boolean describing if the wizard step is being edited after being competed\n     *\n     * This flag can only be true when `selected` is true.\n     */\n    this.editing = false;\n    /**\n     * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n     */\n    this.defaultSelected = false;\n    /**\n     * A boolean describing if the wizard step is an optional step\n     */\n    this.optional = false;\n    /**\n     * A function or boolean deciding, if this step can be entered\n     */\n    this.canEnter = true;\n    /**\n     * A function or boolean deciding, if this step can be exited\n     */\n    this.canExit = true;\n    /**\n     * This [[EventEmitter]] is called when the step is entered.\n     * The bound method should be used to do initialization work.\n     */\n    this.stepEnter = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called when the step is exited.\n     * The bound method can be used to do cleanup work.\n     */\n    this.stepExit = new EventEmitter();\n  }\n  /**\n   * Returns true if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n  get hidden() {\n    return !this.selected;\n  }\n  /**\n   * This method returns true, if this wizard step can be transitioned with a given direction.\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n   *\n   * @param condition A condition variable, deciding if the step can be transitioned\n   * @param direction The direction in which this step should be transitioned\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n   */\n  static canTransitionStep(condition, direction) {\n    if (typeof condition === typeof true) {\n      return Promise.resolve(condition);\n    } else if (condition instanceof Function) {\n      return Promise.resolve(condition(direction));\n    } else {\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n    }\n  }\n  /**\n   * A function called when the step is entered\n   *\n   * @param direction The direction in which the step is entered\n   */\n  enter(direction) {\n    this.stepEnter.emit(direction);\n  }\n  /**\n   * A function called when the step is exited\n   *\n   * @param direction The direction in which the step is exited\n   */\n  exit(direction) {\n    this.stepExit.emit(direction);\n  }\n  /**\n   * This method returns true, if this wizard step can be entered from the given direction.\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be entered\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n   */\n  canEnterStep(direction) {\n    return WizardStep.canTransitionStep(this.canEnter, direction);\n  }\n  /**\n   * This method returns true, if this wizard step can be exited into given direction.\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be left\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n   */\n  canExitStep(direction) {\n    return WizardStep.canTransitionStep(this.canExit, direction);\n  }\n  static {\n    this.ɵfac = function WizardStep_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || WizardStep)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: WizardStep,\n      contentQueries: function WizardStep_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, WizardStepTitleDirective, 5);\n          i0.ɵɵcontentQuery(dirIndex, WizardStepSymbolDirective, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.stepTitleTemplate = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.stepSymbolTemplate = _t.first);\n        }\n      },\n      hostVars: 1,\n      hostBindings: function WizardStep_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"hidden\", ctx.hidden);\n        }\n      },\n      inputs: {\n        stepId: \"stepId\",\n        stepTitle: \"stepTitle\",\n        navigationSymbol: \"navigationSymbol\",\n        canEnter: \"canEnter\",\n        canExit: \"canExit\"\n      },\n      outputs: {\n        stepEnter: \"stepEnter\",\n        stepExit: \"stepExit\"\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardStep, [{\n    type: Directive\n  }], null, {\n    stepTitleTemplate: [{\n      type: ContentChild,\n      args: [WizardStepTitleDirective]\n    }],\n    stepSymbolTemplate: [{\n      type: ContentChild,\n      args: [WizardStepSymbolDirective]\n    }],\n    stepId: [{\n      type: Input\n    }],\n    stepTitle: [{\n      type: Input\n    }],\n    navigationSymbol: [{\n      type: Input\n    }],\n    canEnter: [{\n      type: Input\n    }],\n    canExit: [{\n      type: Input\n    }],\n    stepEnter: [{\n      type: Output\n    }],\n    stepExit: [{\n      type: Output\n    }],\n    hidden: [{\n      type: HostBinding,\n      args: ['hidden']\n    }]\n  });\n})();\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\n/* tslint:disable-next-line directive-class-suffix */\nclass WizardCompletionStep extends WizardStep {\n  constructor() {\n    super(...arguments);\n    /**\n     * @inheritDoc\n     */\n    this.stepExit = new EventEmitter();\n    /**\n     * @inheritDoc\n     */\n    this.canExit = false;\n  }\n  /**\n   * @inheritDoc\n   */\n  enter(direction) {\n    this.completed = true;\n    this.stepEnter.emit(direction);\n  }\n  /**\n   * @inheritDoc\n   */\n  exit(direction) {\n    // set this completion step as incomplete (unless it happens to be initiallyCompleted)\n    this.completed = this.initiallyCompleted;\n    this.stepExit.emit(direction);\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵWizardCompletionStep_BaseFactory;\n      return function WizardCompletionStep_Factory(__ngFactoryType__) {\n        return (ɵWizardCompletionStep_BaseFactory || (ɵWizardCompletionStep_BaseFactory = i0.ɵɵgetInheritedFactory(WizardCompletionStep)))(__ngFactoryType__ || WizardCompletionStep);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: WizardCompletionStep,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardCompletionStep, [{\n    type: Directive\n  }], null, null);\n})();\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardCompletionStepComponent extends WizardCompletionStep {\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵWizardCompletionStepComponent_BaseFactory;\n      return function WizardCompletionStepComponent_Factory(__ngFactoryType__) {\n        return (ɵWizardCompletionStepComponent_BaseFactory || (ɵWizardCompletionStepComponent_BaseFactory = i0.ɵɵgetInheritedFactory(WizardCompletionStepComponent)))(__ngFactoryType__ || WizardCompletionStepComponent);\n      };\n    })();\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: WizardCompletionStepComponent,\n      selectors: [[\"aw-wizard-completion-step\"]],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardCompletionStepComponent)\n      }, {\n        provide: WizardCompletionStep,\n        useExisting: forwardRef(() => WizardCompletionStepComponent)\n      }]), i0.ɵɵInheritDefinitionFeature],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function WizardCompletionStepComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardCompletionStepComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-completion-step',\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardCompletionStepComponent)\n      }, {\n        provide: WizardCompletionStep,\n        useExisting: forwardRef(() => WizardCompletionStepComponent)\n      }],\n      template: \"<ng-content></ng-content>\\n\"\n    }]\n  }], null, null);\n})();\nclass WizardBase {\n  static {\n    this.ɵfac = function WizardBase_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || WizardBase)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: WizardBase,\n      factory: WizardBase.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardBase, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nfunction isStepId(value) {\n  return Object.prototype.hasOwnProperty.call(value, 'stepId') && !(value instanceof WizardStep);\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nfunction isStepIndex(value) {\n  return Object.prototype.hasOwnProperty.call(value, 'stepIndex');\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nfunction isStepOffset(value) {\n  return Object.prototype.hasOwnProperty.call(value, 'stepOffset');\n}\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass GoToStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  constructor(wizard, wizardStep) {\n    this.wizard = wizard;\n    this.wizardStep = wizardStep;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience field for `preFinalize`\n   */\n  get finalize() {\n    return this.preFinalize;\n  }\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  set finalize(emitter) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n  /**\n   * Returns the destination step of this directive as an absolute step index inside the wizard\n   *\n   * @returns The index of the destination step\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\n   */\n  get destinationStep() {\n    let destinationStep;\n    if (isStepIndex(this.targetStep)) {\n      destinationStep = this.targetStep.stepIndex;\n    } else if (isStepId(this.targetStep)) {\n      destinationStep = this.wizard.getIndexOfStepWithId(this.targetStep.stepId);\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n      destinationStep = this.wizard.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n    } else if (this.targetStep instanceof WizardStep) {\n      destinationStep = this.wizard.getIndexOfStep(this.targetStep);\n    } else {\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n    }\n    return destinationStep;\n  }\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the `destinationStep`\n   */\n  onClick() {\n    this.wizard.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n  }\n  static {\n    this.ɵfac = function GoToStepDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || GoToStepDirective)(i0.ɵɵdirectiveInject(WizardBase), i0.ɵɵdirectiveInject(WizardStep, 8));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: GoToStepDirective,\n      selectors: [[\"\", \"awGoToStep\", \"\"]],\n      hostBindings: function GoToStepDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function GoToStepDirective_click_HostBindingHandler() {\n            return ctx.onClick();\n          });\n        }\n      },\n      inputs: {\n        targetStep: [0, \"awGoToStep\", \"targetStep\"]\n      },\n      outputs: {\n        preFinalize: \"preFinalize\",\n        postFinalize: \"postFinalize\",\n        finalize: \"finalize\"\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoToStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awGoToStep]'\n    }]\n  }], () => [{\n    type: WizardBase\n  }, {\n    type: WizardStep,\n    decorators: [{\n      type: Optional\n    }]\n  }], {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    targetStep: [{\n      type: Input,\n      args: ['awGoToStep']\n    }],\n    finalize: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardNavigationBarComponent {\n  /**\n   * Constructor\n   *\n   * @param wizard The state the wizard currently resides in\n   */\n  constructor(wizard) {\n    this.wizard = wizard;\n  }\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n  get wizardSteps() {\n    switch (this.wizard.navBarDirection) {\n      case 'right-to-left':\n        return this.wizard.wizardSteps.slice().reverse();\n      case 'left-to-right':\n      default:\n        return this.wizard.wizardSteps;\n    }\n  }\n  /**\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\n   *\n   * @returns The number of wizard steps to be displayed\n   */\n  get numberOfWizardSteps() {\n    return this.wizard.wizardSteps.length;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `current`\n   */\n  isCurrent(wizardStep) {\n    return wizardStep.selected;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `editing`\n   */\n  isEditing(wizardStep) {\n    return wizardStep.editing;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `done`\n   */\n  isDone(wizardStep) {\n    return wizardStep.completed;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `optional`\n   */\n  isOptional(wizardStep) {\n    return wizardStep.optional;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `completed` in the navigation bar.\n   *\n   * The `completed` class is only applied to completion steps.\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `completed`\n   */\n  isCompleted(wizardStep) {\n    return wizardStep instanceof WizardCompletionStep && this.wizard.completed;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n   * A wizard step can be navigated to if:\n   * - the step is currently not selected\n   * - the navigation bar isn't disabled\n   * - the navigation mode allows navigation to the step\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as navigable\n   */\n  isNavigable(wizardStep) {\n    return !wizardStep.selected && !this.wizard.disableNavigationBar && this.wizard.isNavigable(this.wizard.getIndexOfStep(wizardStep));\n  }\n  static {\n    this.ɵfac = function WizardNavigationBarComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || WizardNavigationBarComponent)(i0.ɵɵdirectiveInject(WizardBase));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: WizardNavigationBarComponent,\n      selectors: [[\"aw-wizard-navigation-bar\"]],\n      decls: 2,\n      vars: 4,\n      consts: [[3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [3, \"awGoToStep\"], [1, \"label\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"step-indicator\", 3, \"ngStyle\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n      template: function WizardNavigationBarComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ul\");\n          i0.ɵɵtemplate(1, WizardNavigationBarComponent_li_1_Template, 8, 17, \"li\", 0);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassMapInterpolate1(\"steps-indicator steps-\", ctx.numberOfWizardSteps, \"\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngForOf\", ctx.wizardSteps);\n        }\n      },\n      dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, GoToStepDirective],\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardNavigationBarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-navigation-bar',\n      template: \"<ul class=\\\"steps-indicator steps-{{numberOfWizardSteps}}\\\">\\n  <li [attr.id]=\\\"step.stepId\\\" *ngFor=\\\"let step of wizardSteps\\\" [ngClass]=\\\"{\\n        'current': isCurrent(step),\\n        'editing': isEditing(step),\\n        'done': isDone(step),\\n        'optional': isOptional(step),\\n        'completed': isCompleted(step),\\n        'navigable': isNavigable(step)\\n  }\\\">\\n    <a [awGoToStep]=\\\"step\\\">\\n      <div class=\\\"label\\\">\\n        <ng-container *ngIf=\\\"step.stepTitleTemplate\\\" [ngTemplateOutlet]=\\\"step.stepTitleTemplate.templateRef\\\"\\n          [ngTemplateOutletContext]=\\\"{wizardStep: step}\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepTitleTemplate\\\">{{step.stepTitle}}</ng-container>\\n      </div>\\n      <div class=\\\"step-indicator\\\"\\n        [ngStyle]=\\\"{ 'font-family': step.stepSymbolTemplate ? '' : step.navigationSymbol.fontFamily }\\\">\\n        <ng-container *ngIf=\\\"step.stepSymbolTemplate\\\" [ngTemplateOutlet]=\\\"step.stepSymbolTemplate.templateRef\\\"\\n          [ngTemplateOutletContext]=\\\"{wizardStep: step}\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepSymbolTemplate\\\">{{step.navigationSymbol.symbol}}</ng-container>\\n      </div>\\n    </a>\\n  </li>\\n</ul>\\n\"\n    }]\n  }], () => [{\n    type: WizardBase\n  }], null);\n})();\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepComponent extends WizardStep {\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵWizardStepComponent_BaseFactory;\n      return function WizardStepComponent_Factory(__ngFactoryType__) {\n        return (ɵWizardStepComponent_BaseFactory || (ɵWizardStepComponent_BaseFactory = i0.ɵɵgetInheritedFactory(WizardStepComponent)))(__ngFactoryType__ || WizardStepComponent);\n      };\n    })();\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: WizardStepComponent,\n      selectors: [[\"aw-wizard-step\"]],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardStepComponent)\n      }]), i0.ɵɵInheritDefinitionFeature],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function WizardStepComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardStepComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-step',\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardStepComponent)\n      }],\n      template: \"<ng-content></ng-content>\\n\"\n    }]\n  }], null, null);\n})();\n\n/**\n * The direction in which a step transition was made\n *\n * @author Marc Arndt\n */\n/**\n * This enum contains the different possible moving directions in which a wizard can be traversed\n *\n * @author Marc Arndt\n */\nvar MovingDirection;\n(function (MovingDirection) {\n  /**\n   * A forward step transition\n   */\n  MovingDirection[MovingDirection[\"Forwards\"] = 0] = \"Forwards\";\n  /**\n   * A backward step transition\n   */\n  MovingDirection[MovingDirection[\"Backwards\"] = 1] = \"Backwards\";\n  /**\n   * No step transition was done\n   */\n  MovingDirection[MovingDirection[\"Stay\"] = 2] = \"Stay\";\n})(MovingDirection || (MovingDirection = {}));\n\n/**\n * Base implementation of [[NavigationMode]]\n *\n * Note: Built-in [[NavigationMode]] classes should be stateless, allowing the library user to easily create\n * an instance of a particular [[NavigationMode]] class and pass it to `<aw-wizard [navigationMode]=\"...\">`.\n *\n * @author Marc Arndt\n */\nclass BaseNavigationMode {\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n   * Navigation by navigation bar is governed by [[isNavigable]].\n   *\n   * In this implementation, a destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - the destination step can be entered in the direction from the current step\n   *\n   * Subclasses can impose additional restrictions, see [[canTransitionToStep]].\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and `false` otherwise\n   */\n  canGoToStep(wizard, destinationIndex) {\n    const hasStep = wizard.hasStep(destinationIndex);\n    const movingDirection = wizard.getMovingDirection(destinationIndex);\n    const canExitCurrentStep = previous => {\n      return previous && wizard.currentStep.canExitStep(movingDirection);\n    };\n    const canEnterDestinationStep = previous => {\n      return previous && wizard.getStepAtIndex(destinationIndex).canEnterStep(movingDirection);\n    };\n    const canTransitionToStep = previous => {\n      return previous && this.canTransitionToStep(wizard, destinationIndex);\n    };\n    return Promise.resolve(hasStep).then(canTransitionToStep)\n    // Apply user-defined checks at the end.  They can involve user interaction\n    // which is better to be avoided if navigation mode does not actually allow the transition\n    // (`canTransitionToStep` returns `false`).\n    .then(canExitCurrentStep).then(canEnterDestinationStep);\n  }\n  /**\n   * Imposes additional restrictions for `canGoToStep` in current navigation mode.\n   *\n   * The base implementation allows transition iff the given step is navigable from the navigation bar (see `isNavigable`).\n   * However, in some navigation modes `canTransitionToStep` can be more relaxed to allow navigation to certain steps\n   * by previous/next buttons, but not using the navigation bar.\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination step\n   * @returns `true`, if the destination step can be transitioned to and `false` otherwise\n   */\n  canTransitionToStep(wizard, destinationIndex) {\n    return this.isNavigable(wizard, destinationIndex);\n  }\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   *\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(wizard, destinationIndex, preFinalize, postFinalize) {\n    this.canGoToStep(wizard, destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection = wizard.getMovingDirection(destinationIndex);\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n        // leave current step\n        wizard.currentStep.completed = true;\n        wizard.currentStep.exit(movingDirection);\n        wizard.currentStep.editing = false;\n        wizard.currentStep.selected = false;\n        this.transition(wizard, destinationIndex);\n        // remember if the next step is already completed before entering it to properly set `editing` flag\n        const wasCompleted = wizard.completed || wizard.currentStep.completed;\n        // go to next step\n        wizard.currentStep.enter(movingDirection);\n        wizard.currentStep.selected = true;\n        if (wasCompleted) {\n          wizard.currentStep.editing = true;\n        }\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        wizard.currentStep.exit(MovingDirection.Stay);\n        wizard.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n  /**\n   * Transitions the wizard to the given step index.\n   *\n   * Can perform additional actions in particular navigation mode implementations.\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination wizard step\n   */\n  transition(wizard, destinationIndex) {\n    wizard.currentStepIndex = destinationIndex;\n  }\n  /**\n   * Resets the state of this wizard.\n   *\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete.\n   *\n   * @param wizard The wizard component to operate on\n   */\n  reset(wizard) {\n    this.ensureCanReset(wizard);\n    // reset the step internal state\n    wizard.wizardSteps.forEach(step => {\n      step.completed = step.initiallyCompleted;\n      step.selected = false;\n      step.editing = false;\n    });\n    // set the first step as the current step\n    wizard.currentStepIndex = wizard.defaultStepIndex;\n    wizard.currentStep.selected = true;\n    wizard.currentStep.enter(MovingDirection.Forwards);\n  }\n  /**\n   * Checks if wizard configuration allows to perform reset.\n   *\n   * A check failure is indicated by throwing an `Error` with the message discribing the discovered misconfiguration issue.\n   *\n   * Can include additional checks in particular navigation mode implementations.\n   *\n   * @param wizard The wizard component to operate on\n   * @throws An `Error` is thrown, if a micconfiguration issue is discovered.\n   */\n  ensureCanReset(wizard) {\n    // the wizard doesn't contain a step with the default step index\n    if (!wizard.hasStep(wizard.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${wizard.defaultStepIndex}`);\n    }\n  }\n}\n\n/**\n * The default navigation mode used by [[WizardComponent]] and [[NavigationModeDirective]].\n *\n * It is parameterized with two navigation policies passed to constructor:\n *\n * - [[navigateBackward]] policy controls whether wizard steps before the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"deny\"`\n *\n * - [[navigateForward]] policy controls whether wizard steps after the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - `\"visited\"` -- a step is navigable iff it was already visited before\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"allow\"`\n */\nclass ConfigurableNavigationMode extends BaseNavigationMode {\n  /**\n   * Constructor\n   *\n   * @param navigateBackward Controls whether wizard steps before the current step are navigable\n   * @param navigateForward Controls whether wizard steps before the current step are navigable\n   */\n  constructor(navigateBackward = null, navigateForward = null) {\n    super();\n    this.navigateBackward = navigateBackward;\n    this.navigateForward = navigateForward;\n    this.navigateBackward = this.navigateBackward || 'allow';\n    this.navigateForward = this.navigateForward || 'deny';\n  }\n  /**\n   * @inheritDoc\n   */\n  canTransitionToStep(wizard, destinationIndex) {\n    // if the destination step can be navigated to using the navigation bar,\n    // it should be accessible with [goToStep] as well\n    if (this.isNavigable(wizard, destinationIndex)) {\n      return true;\n    }\n    // navigation with [goToStep] is permitted if all previous steps\n    // to the destination step have been completed or are optional\n    return wizard.wizardSteps.filter((step, index) => index < destinationIndex && index !== wizard.currentStepIndex).every(step => step.completed || step.optional);\n  }\n  /**\n   * @inheritDoc\n   */\n  transition(wizard, destinationIndex) {\n    if (this.navigateForward === 'deny') {\n      // set all steps after the destination step to incomplete\n      wizard.wizardSteps.filter((step, index) => wizard.currentStepIndex > destinationIndex && index > destinationIndex).forEach(step => step.completed = false);\n    }\n    super.transition(wizard, destinationIndex);\n  }\n  /**\n   * @inheritDoc\n   */\n  isNavigable(wizard, destinationIndex) {\n    // Check if the destination step can be navigated to\n    const destinationStep = wizard.getStepAtIndex(destinationIndex);\n    if (destinationStep instanceof WizardCompletionStep) {\n      // A completion step can only be entered, if all previous steps have been completed, are optional, or selected\n      const previousStepsCompleted = wizard.wizardSteps.filter((step, index) => index < destinationIndex).every(step => step.completed || step.optional || step.selected);\n      if (!previousStepsCompleted) {\n        return false;\n      }\n    }\n    // Apply navigation pocicies\n    if (destinationIndex < wizard.currentStepIndex) {\n      // If the destination step is before current, apply the `navigateBackward` policy\n      switch (this.navigateBackward) {\n        case 'allow':\n          return true;\n        case 'deny':\n          return false;\n        default:\n          throw new Error(`Invalid value for navigateBackward: ${this.navigateBackward}`);\n      }\n    } else if (destinationIndex > wizard.currentStepIndex) {\n      // If the destination step is after current, apply the `navigateForward` policy\n      switch (this.navigateForward) {\n        case 'allow':\n          return true;\n        case 'deny':\n          return false;\n        case 'visited':\n          return destinationStep.completed;\n        default:\n          throw new Error(`Invalid value for navigateForward: ${this.navigateForward}`);\n      }\n    } else {\n      // Re-entering the current step is not allowed\n      return false;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  ensureCanReset(wizard) {\n    super.ensureCanReset(wizard);\n    // the default step is a completion step and the wizard contains more than one step\n    const defaultWizardStep = wizard.getStepAtIndex(wizard.defaultStepIndex);\n    const defaultCompletionStep = defaultWizardStep instanceof WizardCompletionStep;\n    if (defaultCompletionStep && wizard.wizardSteps.length !== 1) {\n      throw new Error(`The default step index ${wizard.defaultStepIndex} references a completion step`);\n    }\n  }\n}\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardComponent {\n  /**\n   * The initially selected step, represented by its index\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   */\n  get defaultStepIndex() {\n    // This value can be either:\n    // - the index of a wizard step with a `selected` directive, or\n    // - the default step index, set in the [[WizardComponent]]\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n    if (foundDefaultStep) {\n      return this.getIndexOfStep(foundDefaultStep);\n    } else {\n      return this._defaultStepIndex;\n    }\n  }\n  set defaultStepIndex(defaultStepIndex) {\n    this._defaultStepIndex = defaultStepIndex;\n  }\n  /**\n   * Constructor\n   */\n  constructor() {\n    /**\n     * The location of the navigation bar inside the wizard.\n     * This location can be either top, bottom, left or right\n     */\n    this.navBarLocation = 'top';\n    /**\n     * The layout of the navigation bar inside the wizard.\n     * The layout can be either small, large-filled, large-empty or large-symbols\n     */\n    this.navBarLayout = 'small';\n    /**\n     * The direction in which the steps inside the navigation bar should be shown.\n     * The direction can be either `left-to-right` or `right-to-left`\n     */\n    this.navBarDirection = 'left-to-right';\n    this._defaultStepIndex = 0;\n    /**\n     * True, if the navigation bar shouldn't be used for navigating\n     */\n    this.disableNavigationBar = false;\n    /**\n     * The navigation mode used to navigate inside the wizard\n     *\n     * For outside access, use the [[navigation]] getter.\n     */\n    this._navigation = new ConfigurableNavigationMode();\n    /**\n     * An array representation of all wizard steps belonging to this model\n     *\n     * For outside access, use the [[wizardSteps]] getter.\n     */\n    this._wizardSteps = [];\n    /**\n     * The index of the currently visible and selected step inside the wizardSteps QueryList.\n     * If this wizard contains no steps, currentStepIndex is -1\n     *\n     * Note: Do not modify this field directly.  Instead, use navigation methods:\n     * [[goToStep]], [[goToPreviousStep]], [[goToNextStep]].\n     */\n    this.currentStepIndex = -1;\n  }\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @returns True if this wizard uses a horizontal orientation\n   */\n  get horizontalOrientation() {\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n  }\n  /**\n   * Returns true if this wizard uses a vertical orientation.\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n   *\n   * @returns True if this wizard uses a vertical orientation\n   */\n  get verticalOrientation() {\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n  }\n  /**\n   * Initialization work\n   */\n  ngAfterContentInit() {\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n    this.wizardStepsQueryList.changes.subscribe(changedWizardSteps => {\n      this.updateWizardSteps(changedWizardSteps.toArray());\n    });\n    // initialize the model\n    this.updateWizardSteps(this.wizardStepsQueryList.toArray());\n    // finally reset the whole wizard component\n    setTimeout(() => this.reset());\n  }\n  /**\n   * The WizardStep object belonging to the currently visible and selected step.\n   * The currentStep is always the currently selected wizard step.\n   * The currentStep can be either completed, if it was visited earlier,\n   * or not completed, if it is visited for the first time or its state is currently out of date.\n   *\n   * If this wizard contains no steps, currentStep is null\n   */\n  get currentStep() {\n    if (this.hasStep(this.currentStepIndex)) {\n      return this.wizardSteps[this.currentStepIndex];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * The completeness of the wizard.\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n   */\n  get completed() {\n    return this.wizardSteps.every(step => step.completed || step.optional);\n  }\n  /**\n   * An array representation of all wizard steps belonging to this model\n   */\n  get wizardSteps() {\n    return this._wizardSteps;\n  }\n  /**\n   * Updates the wizard steps to the new array\n   *\n   * @param wizardSteps The updated wizard steps\n   */\n  updateWizardSteps(wizardSteps) {\n    // the wizard is currently not in the initialization phase\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n      this.currentStepIndex = wizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n    }\n    this._wizardSteps = wizardSteps;\n  }\n  /**\n   * The navigation mode used to navigate inside the wizard\n   */\n  get navigation() {\n    return this._navigation;\n  }\n  /**\n   * Updates the navigation mode for this wizard component\n   *\n   * @param navigation The updated navigation mode\n   */\n  set navigation(navigation) {\n    this._navigation = navigation;\n  }\n  /**\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n   *\n   * @param stepIndex The to be checked index of a step inside this wizard\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n   */\n  hasStep(stepIndex) {\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n  }\n  /**\n   * Checks if this wizard has a previous step, compared to the current step\n   *\n   * @returns True if this wizard has a previous step before the current step\n   */\n  hasPreviousStep() {\n    return this.hasStep(this.currentStepIndex - 1);\n  }\n  /**\n   * Checks if this wizard has a next step, compared to the current step\n   *\n   * @returns True if this wizard has a next step after the current step\n   */\n  hasNextStep() {\n    return this.hasStep(this.currentStepIndex + 1);\n  }\n  /**\n   * Checks if this wizard is currently inside its last step\n   *\n   * @returns True if the wizard is currently inside its last step\n   */\n  isLastStep() {\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n  }\n  /**\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\n   * If no [[WizardStep]] exists at the given index an Error is thrown\n   *\n   * @param stepIndex The given index\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n   */\n  getStepAtIndex(stepIndex) {\n    if (!this.hasStep(stepIndex)) {\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n    }\n    return this.wizardSteps[stepIndex];\n  }\n  /**\n   * Finds the index of the step with the given `stepId`.\n   * If no step with the given `stepId` exists, `-1` is returned\n   *\n   * @param stepId The given step id\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n   */\n  getIndexOfStepWithId(stepId) {\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\n  }\n  /**\n   * Finds the index of the given [[WizardStep]] `step`.\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n   *\n   * @param step The given [[WizardStep]]\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\n   */\n  getIndexOfStep(step) {\n    return this.wizardSteps.indexOf(step);\n  }\n  /**\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n   *\n   * @param destinationStep The given destination step\n   * @returns The calculated [[MovingDirection]]\n   */\n  getMovingDirection(destinationStep) {\n    let movingDirection;\n    if (destinationStep > this.currentStepIndex) {\n      movingDirection = MovingDirection.Forwards;\n    } else if (destinationStep < this.currentStepIndex) {\n      movingDirection = MovingDirection.Backwards;\n    } else {\n      movingDirection = MovingDirection.Stay;\n    }\n    return movingDirection;\n  }\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n   * Navigation by navigation bar is governed by [[isNavigable]].\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n   */\n  canGoToStep(destinationIndex) {\n    return this.navigation.canGoToStep(this, destinationIndex);\n  }\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   *\n   * Note: You do not have to call [[canGoToStep]] before calling [[goToStep]].\n   * The [[canGoToStep]] method will be called automatically.\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex, preFinalize, postFinalize) {\n    return this.navigation.goToStep(this, destinationIndex, preFinalize, postFinalize);\n  }\n  /**\n   * Tries to transition the wizard to the previous step\n   *\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToPreviousStep(preFinalize, postFinalize) {\n    return this.navigation.goToStep(this, this.currentStepIndex - 1, preFinalize, postFinalize);\n  }\n  /**\n   * Tries to transition the wizard to the next step\n   *\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToNextStep(preFinalize, postFinalize) {\n    return this.navigation.goToStep(this, this.currentStepIndex + 1, preFinalize, postFinalize);\n  }\n  /**\n   * Checks, whether the wizard step, located at the given index, can be navigated to using the navigation bar.\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns True if the step can be navigated to, false otherwise\n   */\n  isNavigable(destinationIndex) {\n    return this.navigation.isNavigable(this, destinationIndex);\n  }\n  /**\n   * Resets the state of this wizard.\n   */\n  reset() {\n    this.navigation.reset(this);\n  }\n  static {\n    this.ɵfac = function WizardComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || WizardComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: WizardComponent,\n      selectors: [[\"aw-wizard\"]],\n      contentQueries: function WizardComponent_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, WizardStep, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wizardStepsQueryList = _t);\n        }\n      },\n      hostVars: 4,\n      hostBindings: function WizardComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"horizontal\", ctx.horizontalOrientation)(\"vertical\", ctx.verticalOrientation);\n        }\n      },\n      inputs: {\n        navBarLocation: \"navBarLocation\",\n        navBarLayout: \"navBarLayout\",\n        navBarDirection: \"navBarDirection\",\n        defaultStepIndex: \"defaultStepIndex\",\n        disableNavigationBar: \"disableNavigationBar\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: WizardBase,\n        useExisting: WizardComponent\n      }])],\n      ngContentSelectors: _c0,\n      decls: 4,\n      vars: 6,\n      consts: [[3, \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"]],\n      template: function WizardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, WizardComponent_aw_wizard_navigation_bar_0_Template, 1, 9, \"aw-wizard-navigation-bar\", 0);\n          i0.ɵɵelementStart(1, \"div\", 1);\n          i0.ɵɵprojection(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(3, WizardComponent_aw_wizard_navigation_bar_3_Template, 1, 9, \"aw-wizard-navigation-bar\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.navBarLocation === \"top\" || ctx.navBarLocation === \"left\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(3, _c4, ctx.navBarLocation === \"left\" || ctx.navBarLocation === \"right\", ctx.navBarLocation === \"top\" || ctx.navBarLocation === \"bottom\"));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.navBarLocation === \"bottom\" || ctx.navBarLocation === \"right\");\n        }\n      },\n      dependencies: [i2.NgClass, i2.NgIf, WizardNavigationBarComponent],\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard',\n      providers: [{\n        provide: WizardBase,\n        useExisting: WizardComponent\n      }],\n      template: \"<aw-wizard-navigation-bar\\n  *ngIf=\\\"navBarLocation === 'top' || navBarLocation === 'left'\\\"\\n  [ngClass]=\\\"{\\n    'vertical': navBarLocation === 'left',\\n    'horizontal': navBarLocation === 'top',\\n    'small': navBarLayout === 'small',\\n    'large-filled': navBarLayout === 'large-filled',\\n    'large-filled-symbols': navBarLayout === 'large-filled-symbols',\\n    'large-empty': navBarLayout === 'large-empty',\\n    'large-empty-symbols': navBarLayout === 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\\n<div [ngClass]=\\\"{\\n  'wizard-steps': true,\\n  'vertical': navBarLocation === 'left' || navBarLocation === 'right',\\n  'horizontal': navBarLocation === 'top' || navBarLocation === 'bottom'\\n}\\\">\\n  <ng-content></ng-content>\\n</div>\\n\\n<aw-wizard-navigation-bar\\n  *ngIf=\\\"navBarLocation === 'bottom' || navBarLocation === 'right'\\\"\\n  [ngClass]=\\\"{\\n    'vertical': navBarLocation === 'right',\\n    'horizontal': navBarLocation === 'bottom',\\n    'small': navBarLayout === 'small',\\n    'large-filled': navBarLayout === 'large-filled',\\n    'large-filled-symbols': navBarLayout === 'large-filled-symbols',\\n    'large-empty': navBarLayout === 'large-empty',\\n    'large-empty-symbols': navBarLayout === 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\"\n    }]\n  }], () => [], {\n    wizardStepsQueryList: [{\n      type: ContentChildren,\n      args: [WizardStep, {\n        descendants: true\n      }]\n    }],\n    navBarLocation: [{\n      type: Input\n    }],\n    navBarLayout: [{\n      type: Input\n    }],\n    navBarDirection: [{\n      type: Input\n    }],\n    defaultStepIndex: [{\n      type: Input\n    }],\n    disableNavigationBar: [{\n      type: Input\n    }],\n    horizontalOrientation: [{\n      type: HostBinding,\n      args: ['class.horizontal']\n    }],\n    verticalOrientation: [{\n      type: HostBinding,\n      args: ['class.vertical']\n    }]\n  });\n})();\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass EnableBackLinksDirective {\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  constructor(completionStep) {\n    this.completionStep = completionStep;\n    /**\n     * This EventEmitter is called when the step is exited.\n     * The bound method can be used to do cleanup work.\n     */\n    this.stepExit = new EventEmitter();\n  }\n  /**\n   * Initialization work\n   */\n  ngOnInit() {\n    this.completionStep.canExit = true;\n    this.completionStep.stepExit = this.stepExit;\n  }\n  static {\n    this.ɵfac = function EnableBackLinksDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || EnableBackLinksDirective)(i0.ɵɵdirectiveInject(WizardCompletionStep, 1));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: EnableBackLinksDirective,\n      selectors: [[\"\", \"awEnableBackLinks\", \"\"]],\n      outputs: {\n        stepExit: \"stepExit\"\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EnableBackLinksDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awEnableBackLinks]'\n    }]\n  }], () => [{\n    type: WizardCompletionStep,\n    decorators: [{\n      type: Host\n    }]\n  }], {\n    stepExit: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass NextStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  constructor(wizard) {\n    this.wizard = wizard;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience field for `preFinalize`\n   */\n  get finalize() {\n    return this.preFinalize;\n  }\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  set finalize(emitter) {\n    this.preFinalize = emitter;\n  }\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the next step\n   */\n  onClick() {\n    this.wizard.goToNextStep(this.preFinalize, this.postFinalize);\n  }\n  static {\n    this.ɵfac = function NextStepDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NextStepDirective)(i0.ɵɵdirectiveInject(WizardComponent));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NextStepDirective,\n      selectors: [[\"\", \"awNextStep\", \"\"]],\n      hostBindings: function NextStepDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function NextStepDirective_click_HostBindingHandler() {\n            return ctx.onClick();\n          });\n        }\n      },\n      outputs: {\n        preFinalize: \"preFinalize\",\n        postFinalize: \"postFinalize\",\n        finalize: \"finalize\"\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NextStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awNextStep]'\n    }]\n  }], () => [{\n    type: WizardComponent\n  }], {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass OptionalStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  constructor(wizardStep) {\n    this.wizardStep = wizardStep;\n    // tslint:disable-next-line:no-input-rename\n    this.optional = true;\n  }\n  /**\n   * Initialization work\n   */\n  ngOnInit() {\n    // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.wizardStep.optional = this.optional || this.optional === '';\n  }\n  static {\n    this.ɵfac = function OptionalStepDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || OptionalStepDirective)(i0.ɵɵdirectiveInject(WizardStep, 1));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: OptionalStepDirective,\n      selectors: [[\"\", \"awOptionalStep\", \"\"]],\n      inputs: {\n        optional: [0, \"awOptionalStep\", \"optional\"]\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OptionalStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awOptionalStep]'\n    }]\n  }], () => [{\n    type: WizardStep,\n    decorators: [{\n      type: Host\n    }]\n  }], {\n    optional: [{\n      type: Input,\n      args: ['awOptionalStep']\n    }]\n  });\n})();\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass PreviousStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  constructor(wizard) {\n    this.wizard = wizard;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience field for `preFinalize`\n   */\n  get finalize() {\n    return this.preFinalize;\n  }\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  set finalize(emitter) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the previous step\n   */\n  onClick() {\n    this.wizard.goToPreviousStep(this.preFinalize, this.postFinalize);\n  }\n  static {\n    this.ɵfac = function PreviousStepDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PreviousStepDirective)(i0.ɵɵdirectiveInject(WizardComponent));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: PreviousStepDirective,\n      selectors: [[\"\", \"awPreviousStep\", \"\"]],\n      hostBindings: function PreviousStepDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function PreviousStepDirective_click_HostBindingHandler() {\n            return ctx.onClick();\n          });\n        }\n      },\n      outputs: {\n        preFinalize: \"preFinalize\",\n        postFinalize: \"postFinalize\",\n        finalize: \"finalize\"\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PreviousStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awPreviousStep]'\n    }]\n  }], () => [{\n    type: WizardComponent\n  }], {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass ResetWizardDirective {\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   */\n  constructor(wizard) {\n    this.wizard = wizard;\n    /**\n     * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n     */\n    this.finalize = new EventEmitter();\n  }\n  /**\n   * Resets the wizard\n   */\n  onClick() {\n    // do some optional cleanup work\n    this.finalize.emit();\n    // reset the wizard to its initial state\n    this.wizard.reset();\n  }\n  static {\n    this.ɵfac = function ResetWizardDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ResetWizardDirective)(i0.ɵɵdirectiveInject(WizardComponent));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ResetWizardDirective,\n      selectors: [[\"\", \"awResetWizard\", \"\"]],\n      hostBindings: function ResetWizardDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function ResetWizardDirective_click_HostBindingHandler() {\n            return ctx.onClick();\n          });\n        }\n      },\n      outputs: {\n        finalize: \"finalize\"\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResetWizardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awResetWizard]'\n    }]\n  }], () => [{\n    type: WizardComponent\n  }], {\n    finalize: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass SelectedStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  constructor(wizardStep) {\n    this.wizardStep = wizardStep;\n  }\n  /**\n   * Initialization work\n   */\n  ngOnInit() {\n    this.wizardStep.defaultSelected = true;\n  }\n  static {\n    this.ɵfac = function SelectedStepDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SelectedStepDirective)(i0.ɵɵdirectiveInject(WizardStep, 1));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: SelectedStepDirective,\n      selectors: [[\"\", \"awSelectedStep\", \"\"]]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SelectedStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awSelectedStep]'\n    }]\n  }], () => [{\n    type: WizardStep,\n    decorators: [{\n      type: Host\n    }]\n  }], null);\n})();\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardCompletionStepDirective extends WizardCompletionStep {\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵWizardCompletionStepDirective_BaseFactory;\n      return function WizardCompletionStepDirective_Factory(__ngFactoryType__) {\n        return (ɵWizardCompletionStepDirective_BaseFactory || (ɵWizardCompletionStepDirective_BaseFactory = i0.ɵɵgetInheritedFactory(WizardCompletionStepDirective)))(__ngFactoryType__ || WizardCompletionStepDirective);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: WizardCompletionStepDirective,\n      selectors: [[\"\", \"awWizardCompletionStep\", \"\"]],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardCompletionStepDirective)\n      }, {\n        provide: WizardCompletionStep,\n        useExisting: forwardRef(() => WizardCompletionStepDirective)\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardCompletionStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awWizardCompletionStep]',\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardCompletionStepDirective)\n      }, {\n        provide: WizardCompletionStep,\n        useExisting: forwardRef(() => WizardCompletionStepDirective)\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepDirective extends WizardStep {\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵWizardStepDirective_BaseFactory;\n      return function WizardStepDirective_Factory(__ngFactoryType__) {\n        return (ɵWizardStepDirective_BaseFactory || (ɵWizardStepDirective_BaseFactory = i0.ɵɵgetInheritedFactory(WizardStepDirective)))(__ngFactoryType__ || WizardStepDirective);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: WizardStepDirective,\n      selectors: [[\"\", \"awWizardStep\", \"\"]],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardStepDirective)\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WizardStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awWizardStep]',\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardStepDirective)\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.\n *\n * There are several usage options:\n *\n * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ```\n *\n * ### Option 2. Pass in a custom navigation mode\n *\n * ```typescript\n * import { BaseNavigationMode } from 'angular-archwizard'\n *\n * class CustomNavigationMode extends BaseNavigationMode {\n *\n *   // ...\n * }\n * ```\n *\n * ```typescript\n * @Component({\n *   // ...\n * })\n * class MyComponent {\n *\n *   navigationMode = new CustomNavigationMode();\n * }\n * ```\n *\n * ```html\n * <aw-wizard [awNavigationMode]=\"navigationMode\">...</aw-wizard>\n * ```\n *\n * ### Additional Notes\n *\n * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs\n *\n * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without\n *   any inputs or parameters causes the wizard to use the default \"strict\" navigation mode equivalent to\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ````\n */\nclass NavigationModeDirective {\n  constructor(wizard) {\n    this.wizard = wizard;\n  }\n  ngOnChanges() {\n    this.wizard.navigation = this.getNavigationMode();\n  }\n  getNavigationMode() {\n    if (this.awNavigationMode) {\n      return this.awNavigationMode;\n    }\n    return new ConfigurableNavigationMode(this.navigateBackward, this.navigateForward);\n  }\n  static {\n    this.ɵfac = function NavigationModeDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NavigationModeDirective)(i0.ɵɵdirectiveInject(WizardComponent));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NavigationModeDirective,\n      selectors: [[\"\", \"awNavigationMode\", \"\"]],\n      inputs: {\n        awNavigationMode: \"awNavigationMode\",\n        navigateBackward: \"navigateBackward\",\n        navigateForward: \"navigateForward\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NavigationModeDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awNavigationMode]'\n    }]\n  }], () => [{\n    type: WizardComponent\n  }], {\n    awNavigationMode: [{\n      type: Input\n    }],\n    navigateBackward: [{\n      type: Input\n    }],\n    navigateForward: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * The `awCompletedStep` directive can be used to make a wizard step initially completed.\n *\n * Initially completed steps are shown as completed when the wizard is presented to the user.\n *\n * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awCompletedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * An optional boolean condition can be specified:\n *\n * ```html\n * <aw-wizard-step [awCompletedStep]=\"shouldBeCompleted\">\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"First step\" [awCompletedStep]=\"firstStepPrefilled\">\n *     ...\n * </aw-wizard-step>\n * ```\n */\nclass CompletedStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]\n   */\n  constructor(wizardStep) {\n    this.wizardStep = wizardStep;\n    // tslint:disable-next-line:no-input-rename\n    this.initiallyCompleted = true;\n  }\n  /**\n   * Initialization work\n   */\n  ngOnInit() {\n    // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted === '';\n  }\n  static {\n    this.ɵfac = function CompletedStepDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CompletedStepDirective)(i0.ɵɵdirectiveInject(WizardStep, 1));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CompletedStepDirective,\n      selectors: [[\"\", \"awCompletedStep\", \"\"]],\n      inputs: {\n        initiallyCompleted: [0, \"awCompletedStep\", \"initiallyCompleted\"]\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CompletedStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awCompletedStep]'\n    }]\n  }], () => [{\n    type: WizardStep,\n    decorators: [{\n      type: Host\n    }]\n  }], {\n    initiallyCompleted: [{\n      type: Input,\n      args: ['awCompletedStep']\n    }]\n  });\n})();\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\nclass ArchwizardModule {\n  /* istanbul ignore next */\n  static forRoot() {\n    return {\n      ngModule: ArchwizardModule,\n      providers: [\n        // Nothing here yet\n      ]\n    };\n  }\n  static {\n    this.ɵfac = function ArchwizardModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ArchwizardModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ArchwizardModule,\n      declarations: [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective],\n      imports: [CommonModule],\n      exports: [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ArchwizardModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective],\n      imports: [CommonModule],\n      exports: [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective]\n    }]\n  }], null, null);\n})();\n\n// export the components\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArchwizardModule, BaseNavigationMode, CompletedStepDirective, ConfigurableNavigationMode, EnableBackLinksDirective, GoToStepDirective, MovingDirection, NavigationModeDirective, NextStepDirective, OptionalStepDirective, PreviousStepDirective, ResetWizardDirective, SelectedStepDirective, WizardCompletionStep, WizardCompletionStepComponent, WizardCompletionStepDirective, WizardComponent, WizardNavigationBarComponent, WizardStep, WizardStepComponent, WizardStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, isStepId, isStepIndex, isStepOffset };\n"],
  "mappings": "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",
  "names": ["MovingDirection"]
}
